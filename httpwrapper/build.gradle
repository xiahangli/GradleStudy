plugins {
    id 'com.android.library'
}

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    //测试的依赖
    //prodDebugCompileClasspath
    testApi 'com.android.databinding:adapters:4.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'


//    api "com.jakewharton.threetenabp:threetenabp:1.0.0"
}



task mycopy(type:Copy){
//    from project.rootDir.getAbsolutePath
//    from
//    from 'source'
//    into dest
}


//参见TaskContainer的
// <T extends Task> TaskProvider<T> register(String name, Class<T> type, Action<? super T> configurationAction) throws InvalidUserDataException;


def someMethod(parameter1, parameter2 = 12, parameter3 = 0) {
   def a =  parameter2 +1
    println "a 11111========="+a
    // Method code goes here
}

someMethod(4,123)

tasks.register("myCpy",Copy,"wode"){
//    print("it ="+it+"\n")

    //从src目录拷贝到dest目录，dest目录不一定要有
    from 'src'
    into 'dest'
}

//tasks.register("myCpy1",Copy.class,new Action<Copy>(){
//    @Override
//    void execute(org.gradle.api.tasks.Copy copy) {
//
//    }
//})



//copy {
//    from configurations.runtimeClasspath
//    into 'build/deploy/lib'
//}